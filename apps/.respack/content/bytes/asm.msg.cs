//-----------------------------------------------------------------------------
// Copyright   :  (c) Chris Moore, 2021
// License     :  MIT
// Generated   : 2021-11-14 3:49:56 -06:00
//-----------------------------------------------------------------------------
namespace Z0.ByteCode
{
    using System;
    using System.Runtime.CompilerServices;


    public static class asm_msg
    {
        public static ReadOnlySpan<byte> get_CollectingBlocksヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x98,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_CollectedBlocksヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xa0,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_CreatingStatementsヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xa8,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_ObliteratingDirectoryヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xb0,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_ObliteratedDirectoryヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xb8,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_EmittingHostRoutinesヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x90,0xfe,0xca,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_EmittedHostRoutinesヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x98,0xfe,0xca,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_CreatingAsmRowsFromBlocksヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xc0,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_CreatedAsmRowsFromBlocksヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xc8,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_DecodingPartsヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xd0,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_DecodingPartRoutinesヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xd8,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_DecodedPartRoutinesヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xe0,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_DecodingHostRoutinesヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xe8,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_DecodedHostRoutinesヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xf0,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_DecodedMachineヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xf8,0x0d,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_CollectingBitstringsヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x00,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_CollectedBitstringsヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x08,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_DecodedHostMembersヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0xb8,0xfe,0xca,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_TraversingSegmentsヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x10,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_TraversedSegmentsヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x18,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_TraversingRegionヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x20,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_TraversingRangeヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x20,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_TraversedRangeヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x28,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_TraversedRegionヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x30,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_ExtractingHostヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x38,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_ExtractedHostヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x40,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_ExtractingResolvedヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x48,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_ExtractedResolvedヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x50,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_CreatedStatementsヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x58,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

        public static ReadOnlySpan<byte> get_TerminalNotFoundヽᐤᐤ  =>  new byte[19]{0x0f,0x1f,0x44,0x00,0x00,0x48,0xb8,0x60,0x0e,0xcb,0x45,0x59,0x02,0x00,0x00,0x48,0x8b,0x00,0xc3};

    }
}
